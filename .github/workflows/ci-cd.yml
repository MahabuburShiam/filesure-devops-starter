# Grafana ConfigMap for datasources
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: filesure
data:
  prometheus.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        url: http://prometheus-service:9090
        access: proxy
        isDefault: true
        editable: true

---
# Grafana ConfigMap for dashboard
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: filesure
data:
  default.yaml: |
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      options:
        path: /var/lib/grafana/dashboards

---
# Grafana Dashboard ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-filesure
  namespace: filesure
data:
  filesure-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "FileSure Document Processing System",
        "tags": ["filesure", "devops"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Job Creation Rates",
            "type": "stat",
            "targets": [
              {
                "expr": "rate(jobs_created_total[5m])",
                "legendFormat": "Jobs/sec"
              }
            ],
            "gridPos": {"h": 8, "w": 6, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Job Processing Rates",
            "type": "stat",
            "targets": [
              {
                "expr": "rate(jobs_processed_total[5m])",
                "legendFormat": "{{status}}"
              }
            ],
            "gridPos": {"h": 8, "w": 6, "x": 6, "y": 0}
          },
          {
            "id": 3,
            "title": "Active Job Counts",
            "type": "graph",
            "targets": [
              {
                "expr": "active_jobs",
                "legendFormat": "Processing"
              },
              {
                "expr": "pending_jobs",
                "legendFormat": "Pending"
              },
              {
                "expr": "completed_jobs",
                "legendFormat": "Completed"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 4,
            "title": "Document Processing Metrics",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(documents_downloaded_total[5m])",
                "legendFormat": "Downloads/sec"
              },
              {
                "expr": "rate(documents_uploaded_total[5m])",
                "legendFormat": "Uploads/sec"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "id": 5,
            "title": "Azure Blob Storage Operations",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(blob_operations_total[5m])",
                "legendFormat": "{{operation}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          },
          {
            "id": 6,
            "title": "Error Rates",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(jobs_failed_total[5m])",
                "legendFormat": "Job Failures"
              },
              {
                "expr": "rate(db_write_failures[5m])",
                "legendFormat": "DB Write Failures"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 16}
          },
          {
            "id": 7,
            "title": "Processing Times",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(job_processing_duration_seconds_bucket[5m]))",
                "legendFormat": "95th percentile"
              },
              {
                "expr": "histogram_quantile(0.50, rate(job_processing_duration_seconds_bucket[5m]))",
                "legendFormat": "50th percentile"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 16}
          }
        ],
        "time": {"from": "now-1h", "to": "now"},
        "refresh": "30s"
      }
    }

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: filesure
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"  # Change this in production
        - name: GF_INSTALL_PLUGINS
          value: "grafana-clock-panel"
        volumeMounts:
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-dashboard-filesure
          mountPath: /var/lib/grafana/dashboards
        - name: grafana-storage
          mountPath: /var/lib/grafana
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards-config
        configMap:
          name: grafana-dashboards-config
      - name: grafana-dashboard-filesure
        configMap:
          name: grafana-dashboard-filesure
      - name: grafana-storage
        emptyDir: {}

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: filesure
  labels:
    app: grafana
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP

---
# Grafana Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: filesure
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: grafana.local  # Change to your domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 3000